
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#include "gda-sql-parser-enum-types.h"
#include "gda-statement-struct-decl.h"
#include "gda-sql-statement.h"
#include "gda-sql-parser.h"
#include "gda-statement-struct.h"
#include "gda-statement-struct-compound.h"
#include "gda-statement-struct-delete.h"
#include "gda-statement-struct-update.h"
#include "gda-statement-struct-insert.h"
#include "gda-statement-struct-parts.h"
#include "gda-statement-struct-pspec.h"
#include "gda-statement-struct-select.h"
#include "gda-statement-struct-trans.h"
#include "gda-statement-struct-unknown.h"
#include "gda-statement-struct-util.h"

#define C_ENUM(v) ((gint) v)
#define C_FLAGS(v) ((guint) v)

/* enumerations from "gda-sql-parser.h" */

GType
gda_sql_parser_error_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_PARSER_SYNTAX_ERROR), "GDA_SQL_PARSER_SYNTAX_ERROR", "syntax-error" },
    { C_ENUM(GDA_SQL_PARSER_OVERFLOW_ERROR), "GDA_SQL_PARSER_OVERFLOW_ERROR", "overflow-error" },
    { C_ENUM(GDA_SQL_PARSER_EMPTY_SQL_ERROR), "GDA_SQL_PARSER_EMPTY_SQL_ERROR", "empty-sql-error" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlParserError"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_sql_parser_mode_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_PARSER_MODE_PARSE), "GDA_SQL_PARSER_MODE_PARSE", "parse" },
    { C_ENUM(GDA_SQL_PARSER_MODE_DELIMIT), "GDA_SQL_PARSER_MODE_DELIMIT", "delimit" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlParserMode"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_sql_parser_flavour_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_PARSER_FLAVOUR_STANDARD), "GDA_SQL_PARSER_FLAVOUR_STANDARD", "standard" },
    { C_ENUM(GDA_SQL_PARSER_FLAVOUR_SQLITE), "GDA_SQL_PARSER_FLAVOUR_SQLITE", "sqlite" },
    { C_ENUM(GDA_SQL_PARSER_FLAVOUR_MYSQL), "GDA_SQL_PARSER_FLAVOUR_MYSQL", "mysql" },
    { C_ENUM(GDA_SQL_PARSER_FLAVOUR_ORACLE), "GDA_SQL_PARSER_FLAVOUR_ORACLE", "oracle" },
    { C_ENUM(GDA_SQL_PARSER_FLAVOUR_POSTGRESQL), "GDA_SQL_PARSER_FLAVOUR_POSTGRESQL", "postgresql" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlParserFlavour"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

/* enumerations from "gda-statement-struct-compound.h" */

GType
gda_sql_statement_compound_type_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND_UNION), "GDA_SQL_STATEMENT_COMPOUND_UNION", "union" },
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND_UNION_ALL), "GDA_SQL_STATEMENT_COMPOUND_UNION_ALL", "union-all" },
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND_INTERSECT), "GDA_SQL_STATEMENT_COMPOUND_INTERSECT", "intersect" },
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND_INTERSECT_ALL), "GDA_SQL_STATEMENT_COMPOUND_INTERSECT_ALL", "intersect-all" },
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND_EXCEPT), "GDA_SQL_STATEMENT_COMPOUND_EXCEPT", "except" },
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND_EXCEPT_ALL), "GDA_SQL_STATEMENT_COMPOUND_EXCEPT_ALL", "except-all" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlStatementCompoundType"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

/* enumerations from "gda-statement-struct-decl.h" */

GType
gda_sql_error_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_STRUCTURE_CONTENTS_ERROR), "GDA_SQL_STRUCTURE_CONTENTS_ERROR", "structure-contents-error" },
    { C_ENUM(GDA_SQL_MALFORMED_IDENTIFIER_ERROR), "GDA_SQL_MALFORMED_IDENTIFIER_ERROR", "malformed-identifier-error" },
    { C_ENUM(GDA_SQL_MISSING_IDENTIFIER_ERROR), "GDA_SQL_MISSING_IDENTIFIER_ERROR", "missing-identifier-error" },
    { C_ENUM(GDA_SQL_VALIDATION_ERROR), "GDA_SQL_VALIDATION_ERROR", "validation-error" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlError"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_sql_statement_type_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_STATEMENT_SELECT), "GDA_SQL_STATEMENT_SELECT", "select" },
    { C_ENUM(GDA_SQL_STATEMENT_INSERT), "GDA_SQL_STATEMENT_INSERT", "insert" },
    { C_ENUM(GDA_SQL_STATEMENT_UPDATE), "GDA_SQL_STATEMENT_UPDATE", "update" },
    { C_ENUM(GDA_SQL_STATEMENT_DELETE), "GDA_SQL_STATEMENT_DELETE", "delete" },
    { C_ENUM(GDA_SQL_STATEMENT_COMPOUND), "GDA_SQL_STATEMENT_COMPOUND", "compound" },
    { C_ENUM(GDA_SQL_STATEMENT_BEGIN), "GDA_SQL_STATEMENT_BEGIN", "begin" },
    { C_ENUM(GDA_SQL_STATEMENT_ROLLBACK), "GDA_SQL_STATEMENT_ROLLBACK", "rollback" },
    { C_ENUM(GDA_SQL_STATEMENT_COMMIT), "GDA_SQL_STATEMENT_COMMIT", "commit" },
    { C_ENUM(GDA_SQL_STATEMENT_SAVEPOINT), "GDA_SQL_STATEMENT_SAVEPOINT", "savepoint" },
    { C_ENUM(GDA_SQL_STATEMENT_ROLLBACK_SAVEPOINT), "GDA_SQL_STATEMENT_ROLLBACK_SAVEPOINT", "rollback-savepoint" },
    { C_ENUM(GDA_SQL_STATEMENT_DELETE_SAVEPOINT), "GDA_SQL_STATEMENT_DELETE_SAVEPOINT", "delete-savepoint" },
    { C_ENUM(GDA_SQL_STATEMENT_UNKNOWN), "GDA_SQL_STATEMENT_UNKNOWN", "unknown" },
    { C_ENUM(GDA_SQL_STATEMENT_NONE), "GDA_SQL_STATEMENT_NONE", "none" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlStatementType"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_sql_any_part_type_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_ANY_STMT_SELECT), "GDA_SQL_ANY_STMT_SELECT", "stmt-select" },
    { C_ENUM(GDA_SQL_ANY_STMT_INSERT), "GDA_SQL_ANY_STMT_INSERT", "stmt-insert" },
    { C_ENUM(GDA_SQL_ANY_STMT_UPDATE), "GDA_SQL_ANY_STMT_UPDATE", "stmt-update" },
    { C_ENUM(GDA_SQL_ANY_STMT_DELETE), "GDA_SQL_ANY_STMT_DELETE", "stmt-delete" },
    { C_ENUM(GDA_SQL_ANY_STMT_COMPOUND), "GDA_SQL_ANY_STMT_COMPOUND", "stmt-compound" },
    { C_ENUM(GDA_SQL_ANY_STMT_BEGIN), "GDA_SQL_ANY_STMT_BEGIN", "stmt-begin" },
    { C_ENUM(GDA_SQL_ANY_STMT_ROLLBACK), "GDA_SQL_ANY_STMT_ROLLBACK", "stmt-rollback" },
    { C_ENUM(GDA_SQL_ANY_STMT_COMMIT), "GDA_SQL_ANY_STMT_COMMIT", "stmt-commit" },
    { C_ENUM(GDA_SQL_ANY_STMT_SAVEPOINT), "GDA_SQL_ANY_STMT_SAVEPOINT", "stmt-savepoint" },
    { C_ENUM(GDA_SQL_ANY_STMT_ROLLBACK_SAVEPOINT), "GDA_SQL_ANY_STMT_ROLLBACK_SAVEPOINT", "stmt-rollback-savepoint" },
    { C_ENUM(GDA_SQL_ANY_STMT_DELETE_SAVEPOINT), "GDA_SQL_ANY_STMT_DELETE_SAVEPOINT", "stmt-delete-savepoint" },
    { C_ENUM(GDA_SQL_ANY_STMT_UNKNOWN), "GDA_SQL_ANY_STMT_UNKNOWN", "stmt-unknown" },
    { C_ENUM(GDA_SQL_ANY_EXPR), "GDA_SQL_ANY_EXPR", "expr" },
    { C_ENUM(GDA_SQL_ANY_SQL_FIELD), "GDA_SQL_ANY_SQL_FIELD", "sql-field" },
    { C_ENUM(GDA_SQL_ANY_SQL_TABLE), "GDA_SQL_ANY_SQL_TABLE", "sql-table" },
    { C_ENUM(GDA_SQL_ANY_SQL_FUNCTION), "GDA_SQL_ANY_SQL_FUNCTION", "sql-function" },
    { C_ENUM(GDA_SQL_ANY_SQL_OPERATION), "GDA_SQL_ANY_SQL_OPERATION", "sql-operation" },
    { C_ENUM(GDA_SQL_ANY_SQL_CASE), "GDA_SQL_ANY_SQL_CASE", "sql-case" },
    { C_ENUM(GDA_SQL_ANY_SQL_SELECT_FIELD), "GDA_SQL_ANY_SQL_SELECT_FIELD", "sql-select-field" },
    { C_ENUM(GDA_SQL_ANY_SQL_SELECT_TARGET), "GDA_SQL_ANY_SQL_SELECT_TARGET", "sql-select-target" },
    { C_ENUM(GDA_SQL_ANY_SQL_SELECT_JOIN), "GDA_SQL_ANY_SQL_SELECT_JOIN", "sql-select-join" },
    { C_ENUM(GDA_SQL_ANY_SQL_SELECT_FROM), "GDA_SQL_ANY_SQL_SELECT_FROM", "sql-select-from" },
    { C_ENUM(GDA_SQL_ANY_SQL_SELECT_ORDER), "GDA_SQL_ANY_SQL_SELECT_ORDER", "sql-select-order" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlAnyPartType"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

/* enumerations from "gda-statement-struct-parts.h" */

GType
gda_sql_operator_type_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_AND), "GDA_SQL_OPERATOR_TYPE_AND", "and" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_OR), "GDA_SQL_OPERATOR_TYPE_OR", "or" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_EQ), "GDA_SQL_OPERATOR_TYPE_EQ", "eq" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_IS), "GDA_SQL_OPERATOR_TYPE_IS", "is" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_LIKE), "GDA_SQL_OPERATOR_TYPE_LIKE", "like" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_BETWEEN), "GDA_SQL_OPERATOR_TYPE_BETWEEN", "between" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_GT), "GDA_SQL_OPERATOR_TYPE_GT", "gt" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_LT), "GDA_SQL_OPERATOR_TYPE_LT", "lt" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_GEQ), "GDA_SQL_OPERATOR_TYPE_GEQ", "geq" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_LEQ), "GDA_SQL_OPERATOR_TYPE_LEQ", "leq" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_DIFF), "GDA_SQL_OPERATOR_TYPE_DIFF", "diff" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_REGEXP), "GDA_SQL_OPERATOR_TYPE_REGEXP", "regexp" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_REGEXP_CI), "GDA_SQL_OPERATOR_TYPE_REGEXP_CI", "regexp-ci" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_NOT_REGEXP), "GDA_SQL_OPERATOR_TYPE_NOT_REGEXP", "not-regexp" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_NOT_REGEXP_CI), "GDA_SQL_OPERATOR_TYPE_NOT_REGEXP_CI", "not-regexp-ci" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_SIMILAR), "GDA_SQL_OPERATOR_TYPE_SIMILAR", "similar" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_ISNULL), "GDA_SQL_OPERATOR_TYPE_ISNULL", "isnull" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_ISNOTNULL), "GDA_SQL_OPERATOR_TYPE_ISNOTNULL", "isnotnull" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_NOT), "GDA_SQL_OPERATOR_TYPE_NOT", "not" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_IN), "GDA_SQL_OPERATOR_TYPE_IN", "in" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_NOTIN), "GDA_SQL_OPERATOR_TYPE_NOTIN", "notin" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_CONCAT), "GDA_SQL_OPERATOR_TYPE_CONCAT", "concat" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_PLUS), "GDA_SQL_OPERATOR_TYPE_PLUS", "plus" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_MINUS), "GDA_SQL_OPERATOR_TYPE_MINUS", "minus" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_STAR), "GDA_SQL_OPERATOR_TYPE_STAR", "star" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_DIV), "GDA_SQL_OPERATOR_TYPE_DIV", "div" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_REM), "GDA_SQL_OPERATOR_TYPE_REM", "rem" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_BITAND), "GDA_SQL_OPERATOR_TYPE_BITAND", "bitand" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_BITOR), "GDA_SQL_OPERATOR_TYPE_BITOR", "bitor" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_BITNOT), "GDA_SQL_OPERATOR_TYPE_BITNOT", "bitnot" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_ILIKE), "GDA_SQL_OPERATOR_TYPE_ILIKE", "ilike" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_NOTLIKE), "GDA_SQL_OPERATOR_TYPE_NOTLIKE", "notlike" },
    { C_ENUM(GDA_SQL_OPERATOR_TYPE_NOTILIKE), "GDA_SQL_OPERATOR_TYPE_NOTILIKE", "notilike" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlOperatorType"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_sql_select_join_type_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_SQL_SELECT_JOIN_CROSS), "GDA_SQL_SELECT_JOIN_CROSS", "cross" },
    { C_ENUM(GDA_SQL_SELECT_JOIN_NATURAL), "GDA_SQL_SELECT_JOIN_NATURAL", "natural" },
    { C_ENUM(GDA_SQL_SELECT_JOIN_INNER), "GDA_SQL_SELECT_JOIN_INNER", "inner" },
    { C_ENUM(GDA_SQL_SELECT_JOIN_LEFT), "GDA_SQL_SELECT_JOIN_LEFT", "left" },
    { C_ENUM(GDA_SQL_SELECT_JOIN_RIGHT), "GDA_SQL_SELECT_JOIN_RIGHT", "right" },
    { C_ENUM(GDA_SQL_SELECT_JOIN_FULL), "GDA_SQL_SELECT_JOIN_FULL", "full" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaSqlSelectJoinType"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

/* Generated data ends here */

