
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#include "gda-enum-types.h"
#include "gda-connection.h"
#include "gda-enums.h"

#define C_ENUM(v) ((gint) v)
#define C_FLAGS(v) ((guint) v)

/* enumerations from "gda-connection.h" */

GType
gda_connection_error_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_CONNECTION_DSN_NOT_FOUND_ERROR), "GDA_CONNECTION_DSN_NOT_FOUND_ERROR", "dsn-not-found-error" },
    { C_ENUM(GDA_CONNECTION_PROVIDER_NOT_FOUND_ERROR), "GDA_CONNECTION_PROVIDER_NOT_FOUND_ERROR", "provider-not-found-error" },
    { C_ENUM(GDA_CONNECTION_PROVIDER_ERROR), "GDA_CONNECTION_PROVIDER_ERROR", "provider-error" },
    { C_ENUM(GDA_CONNECTION_NO_CNC_SPEC_ERROR), "GDA_CONNECTION_NO_CNC_SPEC_ERROR", "no-cnc-spec-error" },
    { C_ENUM(GDA_CONNECTION_NO_PROVIDER_SPEC_ERROR), "GDA_CONNECTION_NO_PROVIDER_SPEC_ERROR", "no-provider-spec-error" },
    { C_ENUM(GDA_CONNECTION_OPEN_ERROR), "GDA_CONNECTION_OPEN_ERROR", "open-error" },
    { C_ENUM(GDA_CONNECTION_ALREADY_OPENED_ERROR), "GDA_CONNECTION_ALREADY_OPENED_ERROR", "already-opened-error" },
    { C_ENUM(GDA_CONNECTION_STATEMENT_TYPE_ERROR), "GDA_CONNECTION_STATEMENT_TYPE_ERROR", "statement-type-error" },
    { C_ENUM(GDA_CONNECTION_CANT_LOCK_ERROR), "GDA_CONNECTION_CANT_LOCK_ERROR", "cant-lock-error" },
    { C_ENUM(GDA_CONNECTION_TASK_NOT_FOUND_ERROR), "GDA_CONNECTION_TASK_NOT_FOUND_ERROR", "task-not-found-error" },
    { C_ENUM(GDA_CONNECTION_CLOSED_ERROR), "GDA_CONNECTION_CLOSED_ERROR", "closed-error" },
    { C_ENUM(GDA_CONNECTION_META_DATA_CONTEXT_ERROR), "GDA_CONNECTION_META_DATA_CONTEXT_ERROR", "meta-data-context-error" },
    { C_ENUM(GDA_CONNECTION_NO_MAIN_CONTEXT_ERROR), "GDA_CONNECTION_NO_MAIN_CONTEXT_ERROR", "no-main-context-error" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaConnectionError"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_connection_status_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_CONNECTION_STATUS_CLOSED), "GDA_CONNECTION_STATUS_CLOSED", "closed" },
    { C_ENUM(GDA_CONNECTION_STATUS_OPENING), "GDA_CONNECTION_STATUS_OPENING", "opening" },
    { C_ENUM(GDA_CONNECTION_STATUS_IDLE), "GDA_CONNECTION_STATUS_IDLE", "idle" },
    { C_ENUM(GDA_CONNECTION_STATUS_BUSY), "GDA_CONNECTION_STATUS_BUSY", "busy" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaConnectionStatus"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_connection_options_get_type (void)
{
static gsize gtype_id = 0;
static const GFlagsValue values[] = {
    { C_FLAGS(GDA_CONNECTION_OPTIONS_NONE), "GDA_CONNECTION_OPTIONS_NONE", "none" },
    { C_FLAGS(GDA_CONNECTION_OPTIONS_READ_ONLY), "GDA_CONNECTION_OPTIONS_READ_ONLY", "read-only" },
    { C_FLAGS(GDA_CONNECTION_OPTIONS_SQL_IDENTIFIERS_CASE_SENSITIVE), "GDA_CONNECTION_OPTIONS_SQL_IDENTIFIERS_CASE_SENSITIVE", "sql-identifiers-case-sensitive" },
    { C_FLAGS(GDA_CONNECTION_OPTIONS_AUTO_META_DATA), "GDA_CONNECTION_OPTIONS_AUTO_META_DATA", "auto-meta-data" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_flags_register_static (g_intern_static_string ("GdaConnectionOptions"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_connection_feature_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_CONNECTION_FEATURE_AGGREGATES), "GDA_CONNECTION_FEATURE_AGGREGATES", "aggregates" },
    { C_ENUM(GDA_CONNECTION_FEATURE_BLOBS), "GDA_CONNECTION_FEATURE_BLOBS", "blobs" },
    { C_ENUM(GDA_CONNECTION_FEATURE_INDEXES), "GDA_CONNECTION_FEATURE_INDEXES", "indexes" },
    { C_ENUM(GDA_CONNECTION_FEATURE_INHERITANCE), "GDA_CONNECTION_FEATURE_INHERITANCE", "inheritance" },
    { C_ENUM(GDA_CONNECTION_FEATURE_NAMESPACES), "GDA_CONNECTION_FEATURE_NAMESPACES", "namespaces" },
    { C_ENUM(GDA_CONNECTION_FEATURE_PROCEDURES), "GDA_CONNECTION_FEATURE_PROCEDURES", "procedures" },
    { C_ENUM(GDA_CONNECTION_FEATURE_SEQUENCES), "GDA_CONNECTION_FEATURE_SEQUENCES", "sequences" },
    { C_ENUM(GDA_CONNECTION_FEATURE_SQL), "GDA_CONNECTION_FEATURE_SQL", "sql" },
    { C_ENUM(GDA_CONNECTION_FEATURE_TRANSACTIONS), "GDA_CONNECTION_FEATURE_TRANSACTIONS", "transactions" },
    { C_ENUM(GDA_CONNECTION_FEATURE_SAVEPOINTS), "GDA_CONNECTION_FEATURE_SAVEPOINTS", "savepoints" },
    { C_ENUM(GDA_CONNECTION_FEATURE_SAVEPOINTS_REMOVE), "GDA_CONNECTION_FEATURE_SAVEPOINTS_REMOVE", "savepoints-remove" },
    { C_ENUM(GDA_CONNECTION_FEATURE_TRIGGERS), "GDA_CONNECTION_FEATURE_TRIGGERS", "triggers" },
    { C_ENUM(GDA_CONNECTION_FEATURE_UPDATABLE_CURSOR), "GDA_CONNECTION_FEATURE_UPDATABLE_CURSOR", "updatable-cursor" },
    { C_ENUM(GDA_CONNECTION_FEATURE_USERS), "GDA_CONNECTION_FEATURE_USERS", "users" },
    { C_ENUM(GDA_CONNECTION_FEATURE_VIEWS), "GDA_CONNECTION_FEATURE_VIEWS", "views" },
    { C_ENUM(GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_READ_COMMITTED), "GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_READ_COMMITTED", "transaction-isolation-read-committed" },
    { C_ENUM(GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_READ_UNCOMMITTED), "GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_READ_UNCOMMITTED", "transaction-isolation-read-uncommitted" },
    { C_ENUM(GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_REPEATABLE_READ), "GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_REPEATABLE_READ", "transaction-isolation-repeatable-read" },
    { C_ENUM(GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_SERIALIZABLE), "GDA_CONNECTION_FEATURE_TRANSACTION_ISOLATION_SERIALIZABLE", "transaction-isolation-serializable" },
    { C_ENUM(GDA_CONNECTION_FEATURE_XA_TRANSACTIONS), "GDA_CONNECTION_FEATURE_XA_TRANSACTIONS", "xa-transactions" },
    { C_ENUM(GDA_CONNECTION_FEATURE_LAST), "GDA_CONNECTION_FEATURE_LAST", "last" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaConnectionFeature"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_connection_meta_type_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_CONNECTION_META_NAMESPACES), "GDA_CONNECTION_META_NAMESPACES", "namespaces" },
    { C_ENUM(GDA_CONNECTION_META_TYPES), "GDA_CONNECTION_META_TYPES", "types" },
    { C_ENUM(GDA_CONNECTION_META_TABLES), "GDA_CONNECTION_META_TABLES", "tables" },
    { C_ENUM(GDA_CONNECTION_META_VIEWS), "GDA_CONNECTION_META_VIEWS", "views" },
    { C_ENUM(GDA_CONNECTION_META_FIELDS), "GDA_CONNECTION_META_FIELDS", "fields" },
    { C_ENUM(GDA_CONNECTION_META_INDEXES), "GDA_CONNECTION_META_INDEXES", "indexes" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaConnectionMetaType"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

/* enumerations from "gda-enums.h" */

GType
gda_transaction_isolation_get_type (void)
{
static gsize gtype_id = 0;
static const GEnumValue values[] = {
    { C_ENUM(GDA_TRANSACTION_ISOLATION_SERVER_DEFAULT), "GDA_TRANSACTION_ISOLATION_SERVER_DEFAULT", "server-default" },
    { C_ENUM(GDA_TRANSACTION_ISOLATION_READ_COMMITTED), "GDA_TRANSACTION_ISOLATION_READ_COMMITTED", "read-committed" },
    { C_ENUM(GDA_TRANSACTION_ISOLATION_READ_UNCOMMITTED), "GDA_TRANSACTION_ISOLATION_READ_UNCOMMITTED", "read-uncommitted" },
    { C_ENUM(GDA_TRANSACTION_ISOLATION_REPEATABLE_READ), "GDA_TRANSACTION_ISOLATION_REPEATABLE_READ", "repeatable-read" },
    { C_ENUM(GDA_TRANSACTION_ISOLATION_SERIALIZABLE), "GDA_TRANSACTION_ISOLATION_SERIALIZABLE", "serializable" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_enum_register_static (g_intern_static_string ("GdaTransactionIsolation"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_value_attribute_get_type (void)
{
static gsize gtype_id = 0;
static const GFlagsValue values[] = {
    { C_FLAGS(GDA_VALUE_ATTR_NONE), "GDA_VALUE_ATTR_NONE", "none" },
    { C_FLAGS(GDA_VALUE_ATTR_IS_NULL), "GDA_VALUE_ATTR_IS_NULL", "is-null" },
    { C_FLAGS(GDA_VALUE_ATTR_CAN_BE_NULL), "GDA_VALUE_ATTR_CAN_BE_NULL", "can-be-null" },
    { C_FLAGS(GDA_VALUE_ATTR_IS_DEFAULT), "GDA_VALUE_ATTR_IS_DEFAULT", "is-default" },
    { C_FLAGS(GDA_VALUE_ATTR_CAN_BE_DEFAULT), "GDA_VALUE_ATTR_CAN_BE_DEFAULT", "can-be-default" },
    { C_FLAGS(GDA_VALUE_ATTR_IS_UNCHANGED), "GDA_VALUE_ATTR_IS_UNCHANGED", "is-unchanged" },
    { C_FLAGS(GDA_VALUE_ATTR_DATA_NON_VALID), "GDA_VALUE_ATTR_DATA_NON_VALID", "data-non-valid" },
    { C_FLAGS(GDA_VALUE_ATTR_HAS_VALUE_ORIG), "GDA_VALUE_ATTR_HAS_VALUE_ORIG", "has-value-orig" },
    { C_FLAGS(GDA_VALUE_ATTR_NO_MODIF), "GDA_VALUE_ATTR_NO_MODIF", "no-modif" },
    { C_FLAGS(GDA_VALUE_ATTR_READ_ONLY), "GDA_VALUE_ATTR_READ_ONLY", "read-only" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_flags_register_static (g_intern_static_string ("GdaValueAttribute"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

GType
gda_sql_identifier_style_get_type (void)
{
static gsize gtype_id = 0;
static const GFlagsValue values[] = {
    { C_FLAGS(GDA_SQL_IDENTIFIERS_LOWER_CASE), "GDA_SQL_IDENTIFIERS_LOWER_CASE", "lower-case" },
    { C_FLAGS(GDA_SQL_IDENTIFIERS_UPPER_CASE), "GDA_SQL_IDENTIFIERS_UPPER_CASE", "upper-case" },
{ 0, NULL, NULL }
        };
        if (g_once_init_enter (&gtype_id)) {
            GType new_type = g_flags_register_static (g_intern_static_string ("GdaSqlIdentifierStyle"), values);
            g_once_init_leave (&gtype_id, new_type);
        }
        return (GType) gtype_id;
        }

/* Generated data ends here */

